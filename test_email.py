#!/usr/bin/env python3
"""
Email √©rtes√≠t√©si rendszer tesztel√©se
"""

import os
from datetime import datetime
from dotenv import load_dotenv
from email_notifications import (
    send_email_notification, 
    send_success_notification, 
    send_error_notification, 
    send_daily_summary
)

load_dotenv()

def test_basic_email():
    """Alapvet≈ë email teszt"""
    print("üß™ Alapvet≈ë email teszt...")
    
    subject = "üß™ Farcaster Miniapp Email Teszt"
    body = f"""
    <h2>üß™ Email Teszt</h2>
    <p>Ez egy teszt email az automatikus √©rtes√≠t√©si rendszerhez.</p>
    <p><strong>Id≈ëpont:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    <p><strong>St√°tusz:</strong> ‚úÖ Teszt sikeres</p>
    """
    
    success = send_email_notification(subject, body)
    if success:
        print("‚úÖ Alapvet≈ë email teszt sikeres!")
    else:
        print("‚ùå Alapvet≈ë email teszt sikertelen!")
    
    return success

def test_success_notification():
    """Sikeres friss√≠t√©s √©rtes√≠t√©s teszt"""
    print("üß™ Sikeres friss√≠t√©s √©rtes√≠t√©s teszt...")
    
    miniapps_count = 246
    top_changes = """
    <ul>
        <li>#1 Polling Center</li>
        <li>#2 Degen (+88)</li>
        <li>#3 Ponder (+12)</li>
        <li>#4 Warpcast (-5)</li>
        <li>#5 Farcaster (+3)</li>
    </ul>
    """
    
    success = send_success_notification(miniapps_count, top_changes)
    if success:
        print("‚úÖ Sikeres friss√≠t√©s √©rtes√≠t√©s teszt sikeres!")
    else:
        print("‚ùå Sikeres friss√≠t√©s √©rtes√≠t√©s teszt sikertelen!")
    
    return success

def test_error_notification():
    """Hiba √©rtes√≠t√©s teszt"""
    print("üß™ Hiba √©rtes√≠t√©s teszt...")
    
    error_message = "Teszt hiba √ºzenet"
    error_details = """
    Traceback (most recent call last):
      File "test_email.py", line 45, in test_error_notification
        raise Exception("Teszt hiba")
    Exception: Teszt hiba
    """
    
    success = send_error_notification(error_message, error_details)
    if success:
        print("‚úÖ Hiba √©rtes√≠t√©s teszt sikeres!")
    else:
        print("‚ùå Hiba √©rtes√≠t√©s teszt sikertelen!")
    
    return success

def test_daily_summary():
    """Napi √∂sszefoglal√≥ teszt"""
    print("üß™ Napi √∂sszefoglal√≥ teszt...")
    
    # Teszt adatok
    miniapps_data = [
        {
            'miniApp': {'name': 'Polling Center', 'domain': 'polling.center'},
            'rank72hChange': 0
        },
        {
            'miniApp': {'name': 'Degen', 'domain': 'degen.com'},
            'rank72hChange': 88
        },
        {
            'miniApp': {'name': 'Ponder', 'domain': 'ponder.com'},
            'rank72hChange': 12
        },
        {
            'miniApp': {'name': 'Warpcast', 'domain': 'warpcast.com'},
            'rank72hChange': -5
        },
        {
            'miniApp': {'name': 'Farcaster', 'domain': 'farcaster.com'},
            'rank72hChange': 3
        }
    ]
    
    success = send_daily_summary(miniapps_data)
    if success:
        print("‚úÖ Napi √∂sszefoglal√≥ teszt sikeres!")
    else:
        print("‚ùå Napi √∂sszefoglal√≥ teszt sikertelen!")
    
    return success

def check_email_config():
    """Email konfigur√°ci√≥ ellen≈ërz√©se"""
    print("üîß Email konfigur√°ci√≥ ellen≈ërz√©se...")
    
    # El≈ësz√∂r .env-b≈ël pr√≥b√°ljuk
    required_vars = ['EMAIL_SENDER', 'EMAIL_PASSWORD', 'EMAIL_RECIPIENT']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
        else:
            print(f"‚úÖ {var}: {'*' * len(value)}")
    
    # Ha hi√°nyz√≥ .env v√°ltoz√≥k, pr√≥b√°ljuk a config.py-t
    if missing_vars:
        try:
            from config import get_email_config
            email_config = get_email_config()
            
            print("\nüìù .env f√°jl hi√°nyzik, config.py-b√≥l olvasunk...")
            
            # Ellen≈ërizz√ºk a config.py be√°ll√≠t√°sokat
            if email_config["sender"] != "your-email@gmail.com":
                print(f"‚úÖ EMAIL_SENDER: {email_config['sender']}")
                missing_vars = [var for var in missing_vars if var != "EMAIL_SENDER"]
            else:
                print(f"‚ùå EMAIL_SENDER: Nincs be√°ll√≠tva")
                
            if email_config["password"] != "your-app-password":
                print(f"‚úÖ EMAIL_PASSWORD: {'*' * len(email_config['password'])}")
                missing_vars = [var for var in missing_vars if var != "EMAIL_PASSWORD"]
            else:
                print(f"‚ùå EMAIL_PASSWORD: Nincs be√°ll√≠tva")
                
            if email_config["recipient"] != "your-email@gmail.com":
                print(f"‚úÖ EMAIL_RECIPIENT: {email_config['recipient']}")
                missing_vars = [var for var in missing_vars if var != "EMAIL_RECIPIENT"]
            else:
                print(f"‚ùå EMAIL_RECIPIENT: Nincs be√°ll√≠tva")
                
        except Exception as e:
            print(f"‚ùå Config.py hiba: {e}")
    
    if missing_vars:
        print(f"\n‚ùå Hi√°nyz√≥ email konfigur√°ci√≥: {', '.join(missing_vars)}")
        print("\nüìù √Åll√≠tsd be a config.py f√°jlban:")
        print("EMAIL_SENDER = 'your-email@gmail.com'")
        print("EMAIL_PASSWORD = 'your-app-password'")
        print("EMAIL_RECIPIENT = 'your-email@gmail.com'")
        return False
    else:
        print("‚úÖ Minden email konfigur√°ci√≥ be van √°ll√≠tva!")
        return True

def main():
    """F≈ë teszt funkci√≥"""
    print("üìß Farcaster Miniapp Email √ârtes√≠t√©si Rendszer Teszt")
    print("=" * 60)
    
    # Konfigur√°ci√≥ ellen≈ërz√©se
    if not check_email_config():
        print("\n‚ùå Email konfigur√°ci√≥ hi√°nyzik! √Åll√≠tsd be a k√∂rnyezeti v√°ltoz√≥kat.")
        return
    
    print("\nüöÄ Email tesztek ind√≠t√°sa...")
    
    # Tesztek futtat√°sa
    tests = [
        ("Alapvet≈ë email", test_basic_email),
        ("Sikeres friss√≠t√©s", test_success_notification),
        ("Hiba √©rtes√≠t√©s", test_error_notification),
        ("Napi √∂sszefoglal√≥", test_daily_summary)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name} teszt hiba: {e}")
            results.append((test_name, False))
    
    # Eredm√©nyek √∂sszefoglal√°sa
    print("\n" + "=" * 60)
    print("üìä TESZT EREDM√âNYEK:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ SIKERES" if result else "‚ùå SIKERTELEN"
        print(f"{test_name:20} {status}")
        if result:
            passed += 1
    
    print(f"\nüìà √ñsszes√≠t√©s: {passed}/{total} teszt sikeres")
    
    if passed == total:
        print("üéâ Minden email teszt sikeres! Az √©rtes√≠t√©si rendszer m≈±k√∂dik.")
    else:
        print("‚ö†Ô∏è  N√©h√°ny teszt sikertelen. Ellen≈ërizd a konfigur√°ci√≥t.")

if __name__ == "__main__":
    main() 