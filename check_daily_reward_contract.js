// Script a DailyReward szerz≈ëd√©s ellen≈ërz√©s√©re
require('dotenv').config();
const { createPublicClient, http, formatEther } = require('viem');
const { base } = require('viem/chains');

const publicClient = createPublicClient({
  chain: base,
  transport: http()
});

const DAILY_REWARD_ADDRESS = '0xa5c59fb76f3e2012dfd572739b9d5516034f1ff8';
const CHESS_TOKEN_ADDRESS = '0x47AF6bd390D03E266EB87cAb81Aa6988B65d5B07';

async function checkDailyRewardContract() {
  try {
    console.log('üîç Checking DailyReward contract...\n');
    console.log('DailyReward address:', DAILY_REWARD_ADDRESS);
    console.log('CHESS token address:', CHESS_TOKEN_ADDRESS);
    
    // ETH egyenleg ellen≈ërz√©se
    console.log('\nüìä ETH Balance:');
    const ethBalance = await publicClient.getBalance({
      address: DAILY_REWARD_ADDRESS
    });
    console.log(`DailyReward ETH balance: ${formatEther(ethBalance)} ETH`);
    
    // CHESS token egyenleg ellen≈ërz√©se
    console.log('\nüìä CHESS Token Balance:');
    const chessTokenABI = [
      {
        "inputs": [{"name": "account", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "", "type": "uint256"}],
        "stateMutability": "view",
        "type": "function"
      }
    ];
    
    try {
      const chessBalance = await publicClient.readContract({
        address: CHESS_TOKEN_ADDRESS,
        abi: chessTokenABI,
        functionName: 'balanceOf',
        args: [DAILY_REWARD_ADDRESS]
      });
      
      console.log(`DailyReward CHESS balance: ${formatEther(chessBalance)} CHESS`);
      
      if (chessBalance === 0n) {
        console.log('‚ùå PROBL√âMA: A DailyReward szerz≈ëd√©snek nincs CHESS token-je!');
        console.log('üí° MEGOLD√ÅS: K√ºldj CHESS token-eket a DailyReward c√≠m√©re');
      } else {
        console.log('‚úÖ CHESS token egyenleg rendben van');
        
        // H√°ny claim-et tud kifizetni (10,000 CHESS per claim)
        const dailyRewardAmount = 10000n * (10n ** 18n); // 10,000 CHESS in wei
        const possibleClaims = chessBalance / dailyRewardAmount;
        console.log(`üí∞ Possible claims: ${possibleClaims.toString()} (10,000 CHESS each)`);
      }
      
    } catch (tokenError) {
      console.log('‚ö†Ô∏è  Nem siker√ºlt lek√©rdezni a CHESS token egyenleget');
      console.log('Hiba:', tokenError.message);
    }
    
    // Pr√≥b√°ljuk meg ellen≈ërizni a szerz≈ëd√©s funkci√≥it
    console.log('\nüîß Contract Functions Check:');
    
    // Alapvet≈ë szerz≈ëd√©s ellen≈ërz√©s
    const code = await publicClient.getBytecode({
      address: DAILY_REWARD_ADDRESS
    });
    
    if (code && code !== '0x') {
      console.log('‚úÖ DailyReward szerz≈ëd√©s telep√≠tve √©s m≈±k√∂dik');
      console.log(`üìù Bytecode length: ${code.length} characters`);
    } else {
      console.log('‚ùå PROBL√âMA: Nincs szerz≈ëd√©s ezen a c√≠men!');
    }
    
    console.log('\nüí° K√ñVETKEZ≈ê L√âP√âSEK:');
    console.log('1. Ellen≈ërizd a DailyReward szerz≈ëd√©s ABI-j√°t');
    console.log('2. M√≥dos√≠tsd a generate-claim-signature API-t a DailyReward c√≠mre');
    console.log('3. Friss√≠tsd a frontend-et a DailyReward szerz≈ëd√©s haszn√°lat√°ra');
    
  } catch (error) {
    console.error('‚ùå Hiba a DailyReward szerz≈ëd√©s ellen≈ërz√©sekor:', error.message);
  }
}

checkDailyRewardContract();