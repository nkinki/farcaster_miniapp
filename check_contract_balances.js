// Script a szerz≈ëd√©s egyenlegeinek ellen≈ërz√©s√©re
require('dotenv').config();
const { createPublicClient, http, formatEther, parseEther } = require('viem');
const { base } = require('viem/chains');

const publicClient = createPublicClient({
  chain: base,
  transport: http()
});

const REWARDS_CLAIM_ADDRESS = '0xb8d08800d79850375c10a96e87fd196c0e52aa5a';
const CHESS_TOKEN_ADDRESS = '0x47AF6bd390D03E266EB87cAb81Aa6988B65d5B07';

async function checkBalances() {
  try {
    console.log('üîç Checking contract balances...\n');
    
    // ETH egyenleg ellen≈ërz√©se
    console.log('üìä ETH Balance:');
    const ethBalance = await publicClient.getBalance({
      address: REWARDS_CLAIM_ADDRESS
    });
    console.log(`Contract ETH balance: ${formatEther(ethBalance)} ETH`);
    
    if (ethBalance === 0n) {
      console.log('‚ùå PROBL√âMA: A szerz≈ëd√©snek nincs ETH-je gas fee-khez!');
      console.log('üí° MEGOLD√ÅS: K√ºldj ETH-t a szerz≈ëd√©s c√≠m√©re: ' + REWARDS_CLAIM_ADDRESS);
    } else if (ethBalance < parseEther('0.001')) {
      console.log('‚ö†Ô∏è  FIGYELEM: Kev√©s ETH van a szerz≈ëd√©sben gas fee-khez');
      console.log('üí° JAVASLAT: K√ºldj t√∂bb ETH-t a szerz≈ëd√©s c√≠m√©re');
    } else {
      console.log('‚úÖ ETH egyenleg rendben van');
    }
    
    console.log('\nüìä CHESS Token Balance:');
    
    // CHESS token egyenleg (ha van ABI)
    const chessTokenABI = [
      {
        "inputs": [{"name": "account", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "", "type": "uint256"}],
        "stateMutability": "view",
        "type": "function"
      }
    ];
    
    try {
      const chessBalance = await publicClient.readContract({
        address: CHESS_TOKEN_ADDRESS,
        abi: chessTokenABI,
        functionName: 'balanceOf',
        args: [REWARDS_CLAIM_ADDRESS]
      });
      
      console.log(`Contract CHESS balance: ${formatEther(chessBalance)} CHESS`);
      
      if (chessBalance === 0n) {
        console.log('‚ùå PROBL√âMA: A szerz≈ëd√©snek nincs CHESS token-je!');
      } else {
        console.log('‚úÖ CHESS token egyenleg rendben van');
      }
      
    } catch (tokenError) {
      console.log('‚ö†Ô∏è  Nem siker√ºlt lek√©rdezni a CHESS token egyenleget');
      console.log('Hiba:', tokenError.message);
    }
    
    console.log('\nüí° MEGOLD√ÅSI JAVASLATOK:');
    console.log('1. K√ºldj 0.01-0.1 ETH-t a szerz≈ëd√©s c√≠m√©re gas fee-khez');
    console.log('2. Ellen≈ërizd, hogy van-e el√©g CHESS token a szerz≈ëd√©sben');
    console.log('3. Ha approve-ot haszn√°lsz, ellen≈ërizd az allowance-t');
    
  } catch (error) {
    console.error('‚ùå Hiba az egyenlegek ellen≈ërz√©sekor:', error.message);
  }
}

checkBalances();