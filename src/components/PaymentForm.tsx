"use client"

import { useState, useEffect } from "react"
import { FiAlertCircle } from "react-icons/fi"
import { useFarcasterPromo, useCampaignExists } from "../hooks/useFarcasterPromo"
import { useChessToken } from "../hooks/useChessToken"
import { usePromotion } from "../hooks/usePromotions"
import { useAccount, useSimulateContract } from "wagmi"
import FARCASTER_PROMO_ABI from "../abis/FarcasterPromo.json"
import { CONTRACTS } from "../config/contracts"

// Elt√°vol√≠tva a declare global blokk a window.ethereum-hoz

interface PaymentFormProps {
  promotionId: string
  onPaymentComplete: (amount: number, hash: string) => void
  onCancel: () => void
  // √öj propok az √∫j kamp√°ny l√©trehoz√°s√°hoz
  newCampaignData?: {
    castUrl: string
    shareText: string
    rewardPerShare: number
    totalBudget: number
    user: {
      fid: number
      username: string
      displayName: string
    }
  }
}

export default function PaymentForm({ promotionId, onPaymentComplete, onCancel, newCampaignData }: PaymentFormProps) {
  const [rewardPerShare, setRewardPerShare] = useState<number>(newCampaignData?.rewardPerShare || 10000) // Alap√©rtelmezett 10k
  const [error, setError] = useState<string>("")
  const [isCreatingCampaign, setIsCreatingCampaign] = useState(false)
  const [isSavingToDb, setIsSavingToDb] = useState(false)
  const [campaignCreated, setCampaignCreated] = useState(false)

  // Wagmi hookok
  const { address, isConnected } = useAccount()
  const {
    fundCampaign,
    isFundingCampaign,
    fundCampaignHash,
    createCampaign,
    isCreatingCampaign: isCreatingCampaignFromHook,
    createCampaignHash: createCampaignData,
    createCampaignError,
    createCampaignReceiptError,
  } = useFarcasterPromo()
  const {
    balance,
    allowance,
    approve,
    isApproving,
    needsApproval,
    isApproveSuccess,
    approveError,
    balanceError,
    allowanceError,
    balanceLoading,
    allowanceLoading,
    approveFarcasterPromo,
  } = useChessToken()

  // Hibakeres√©si napl√≥z√°s a PaymentForm-hoz
  console.log("üéØ PaymentForm Debug:", {
    address,
    isConnected,
    balance: balance?.toString(),
    allowance: allowance?.toString(),
    balanceError: balanceError?.message,
    allowanceError: allowanceError?.message,
    balanceLoading,
    allowanceLoading,
    isApproving,
    isApproveSuccess,
    approveError: approveError?.message,
    userAgent: navigator.userAgent,
    isFarcasterApp: navigator.userAgent.includes("Farcaster") || window.location.hostname.includes("farcaster"),
  })

  // Neon DB prom√≥ci√≥s adatok (csak megl√©v≈ë kamp√°nyokhoz)
  const {
    promotion,
    loading: promotionLoading,
    error: promotionError,
  } = usePromotion(promotionId === "new" ? undefined : Number(promotionId))

  // Blokkl√°nc kamp√°ny ellen≈ërz√©s (kompatibilit√°s c√©lj√°b√≥l)
  const {
    exists: campaignExists,
    campaign: blockchainCampaign,
    error: campaignError,
    isLoading: campaignLoading,
  } = useCampaignExists(promotionId === "new" ? undefined : BigInt(promotionId))

  // Id≈ët√∫ll√©p√©s hozz√°ad√°sa a bet√∂lt√©si √°llapothoz
  const [loadingTimeout, setLoadingTimeout] = useState(false)

  useEffect(() => {
    if (campaignLoading) {
      const timer = setTimeout(() => {
        setLoadingTimeout(true)
      }, 10000) // 10 m√°sodperc id≈ët√∫ll√©p√©s

      return () => clearTimeout(timer)
    } else {
      setLoadingTimeout(false)
    }
  }, [campaignLoading])

  // Kamp√°ny l√©trehoz√°s√°nak szimul√°l√°sa √∫j kamp√°nyokhoz - with error handling
  const { data: createSimulationData, error: createSimulationError } = useSimulateContract({
    address: CONTRACTS.FarcasterPromo as `0x${string}`,
    abi: FARCASTER_PROMO_ABI,
    functionName: "createCampaign",
    args: newCampaignData
      ? [
          newCampaignData.castUrl.startsWith("http")
            ? newCampaignData.castUrl
            : `https://warpcast.com/~/conversations/${newCampaignData.castUrl}`,
          newCampaignData.shareText || "Share this promotion!",
          BigInt(newCampaignData.rewardPerShare) * BigInt(10 ** 18), // Megfelel≈ë BigInt konverzi√≥
          BigInt(newCampaignData.totalBudget) * BigInt(10 ** 18), // Megfelel≈ë BigInt konverzi√≥
          true, // oszthat√≥
        ]
      : promotion
        ? [
            promotion.cast_url.startsWith("http")
              ? promotion.cast_url
              : `https://warpcast.com/~/conversations/${promotion.cast_url}`,
            promotion.share_text || "Share this promotion!",
            BigInt(rewardPerShare) * BigInt(10 ** 18), // Megfelel≈ë BigInt konverzi√≥
            BigInt(promotion.total_budget) * BigInt(10 ** 18), // Megfelel≈ë BigInt konverzi√≥
            true, // oszthat√≥
          ]
        : undefined,
    query: {
      enabled: isConnected && !!address && (!!newCampaignData || (!!promotion && !campaignExists && !campaignLoading)),
      retry: (failureCount, error) => {
        // Skip retry for connector-related errors
        if (error?.message?.includes('getChainId') ||
            error?.message?.includes('connector') ||
            error?.message?.includes('chain')) {
          console.warn('Skipping simulation retry for connector error:', error.message)
          return false
        }
        return failureCount < 2
      },
      retryDelay: 1000,
    },
  })

  // Szimul√°ci√≥s √°llapot hibakeres√©se
  console.log("Simulation debug:", {
    isConnected,
    address,
    newCampaignData: !!newCampaignData,
    promotion: !!promotion,
    campaignExists,
    campaignLoading,
    enabled: isConnected && !!address && (!!newCampaignData || (!!promotion && !campaignExists && !campaignLoading)),
    simulationData: !!createSimulationData,
    simulationError: createSimulationError?.message,
  })

  const handleRewardPerShareChange = (value: number) => {
    setRewardPerShare(value)
  }

  const formatNumber = (num: number) => {
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`
    if (num >= 1000) return `${(num / 1000).toFixed(0)}K`
    return num.toString()
  }

  const handleCreateCampaign = async () => {
    if (!isConnected) {
      setError("K√©rj√ºk, el≈ësz√∂r csatlakoztassa a p√©nzt√°rc√°j√°t.")
      return
    }

    // √öj kamp√°nyok eset√©n ellen≈ërizze a newCampaignData-t
    if (promotionId === "new") {
      if (!newCampaignData) {
        setError("Hi√°nyoznak az √∫j kamp√°ny adatai.")
        return
      }
    } else {
      // Megl√©v≈ë kamp√°nyok eset√©n ellen≈ërizze a prom√≥ci√≥t
      if (!promotion) {
        setError(`A ${promotionId} prom√≥ci√≥ nem l√©tezik az adatb√°zisban.`)
        return
      }

      if (promotion.status !== "active") {
        setError(`A ${promotionId} prom√≥ci√≥ nem akt√≠v (√°llapot: ${promotion.status}).`)
        return
      }
    }

    // Ellen≈ërizze a minim√°lis √©rt√©keket
    const rewardPerShareValue = promotionId === "new" ? newCampaignData?.rewardPerShare || 0 : rewardPerShare
    const totalBudgetValue = promotionId === "new" ? newCampaignData?.totalBudget || 0 : promotion?.total_budget || 0

    if (rewardPerShareValue <= 0) {
      setError("A megoszt√°sonk√©nti jutalomnak nagyobbnak kell lennie null√°n√°l.")
      return
    }

    if (totalBudgetValue <= 0) {
      setError("A teljes k√∂lts√©gvet√©snek nagyobbnak kell lennie null√°n√°l.")
      return
    }

    if (rewardPerShareValue > totalBudgetValue) {
      setError("A megoszt√°sonk√©nti jutalom nem lehet nagyobb, mint a teljes k√∂lts√©gvet√©s.")
      return
    }

    // Ellen≈ërizze a szimul√°ci√≥ eredm√©ny√©t, miel≈ëtt √≠r√°si k√≠s√©rletet tesz
    // Skip simulation check if it's a connector error
    if (!createSimulationData && promotionId === "new" && newCampaignData) {
      const isConnectorError = createSimulationError?.message?.includes('getChainId') ||
                              createSimulationError?.message?.includes('connector')
      
      if (!isConnectorError) {
        setError(
          createSimulationError?.message ||
            "A kamp√°ny l√©trehoz√°s√°nak szimul√°ci√≥ja sikertelen. R√©szletek√©rt n√©zze meg a konzolt.",
        )
        return
      } else {
        console.warn("Skipping simulation check due to connector error, proceeding with campaign creation")
      }
    }

    setError("")

    try {
      setIsCreatingCampaign(true)

      const campaignData = promotionId === "new" ? newCampaignData! : promotion!
      console.log("Blokkl√°nc kamp√°ny l√©trehoz√°sa ehhez:", campaignData)

      // Haszn√°lja a tov√°bbfejlesztett createCampaign f√ºggv√©nyt megfelel≈ë param√©terekkel
      if (promotionId === "new" && newCampaignData) {
        createCampaign({
          castUrl: newCampaignData.castUrl.startsWith("http")
            ? newCampaignData.castUrl
            : `https://warpcast.com/~/conversations/${newCampaignData.castUrl}`,
          shareText: newCampaignData.shareText || "Share this promotion!",
          rewardPerShare: BigInt(newCampaignData.rewardPerShare) * BigInt(10 ** 18),
          totalBudget: BigInt(newCampaignData.totalBudget) * BigInt(10 ** 18),
          divisible: true,
        })
      } else if (promotion) {
        createCampaign({
          castUrl: promotion.cast_url.startsWith("http")
            ? promotion.cast_url
            : `https://warpcast.com/~/conversations/${promotion.cast_url}`,
          shareText: promotion.share_text || "Share this promotion!",
          rewardPerShare: BigInt(rewardPerShare) * BigInt(10 ** 18),
          totalBudget: BigInt(promotion.total_budget) * BigInt(10 ** 18),
          divisible: true,
        })
      }
    } catch (err) {
      console.error("Hiba a blokkl√°nc kamp√°ny l√©trehoz√°sakor:", err)
      setError(err instanceof Error ? err.message : "A kamp√°ny l√©trehoz√°sa sikertelen.")
      setIsCreatingCampaign(false)
    }
  }

  // Sikeres kamp√°nyl√©trehoz√°s kezel√©se
  useEffect(() => {
    if (createCampaignData) {
      console.log("Kamp√°ny sikeresen l√©trehozva a blokkl√°ncon:", createCampaignData)

      // Ha ez egy √∫j kamp√°ny, mentse el a Neon DB-be
      if (promotionId === "new" && newCampaignData) {
        saveNewCampaignToDb(createCampaignData)
      } else {
        setIsCreatingCampaign(false)
        // Ne t√∂ltse √∫jra, csak mutassa a siker√ºzenetet
        console.log("Kamp√°ny sikeresen l√©trehozva!")
        setCampaignCreated(true)
      }
    }
  }, [createCampaignData, promotionId, newCampaignData])

  // J√≥v√°hagy√°s siker√©nek kezel√©se
  useEffect(() => {
    if (isApproveSuccess) {
      console.log("CHESS token j√≥v√°hagy√°sa sikeres!")
      // Ne t√∂ltse √∫jra, csak mutassa a siker√ºzenetet
      console.log("‚úÖ CHESS j√≥v√°hagy√°s sikeresen befejez≈ëd√∂tt!")
    }
  }, [isApproveSuccess])

  // J√≥v√°hagy√°si hiba kezel√©se
  useEffect(() => {
    if (approveError) {
      console.error("CHESS token j√≥v√°hagy√°sa sikertelen:", approveError)
      setError(`J√≥v√°hagy√°s sikertelen: ${approveError.message}`)
    }
  }, [approveError])

  // Kamp√°nyl√©trehoz√°si hib√°k kezel√©se a hookb√≥l
  useEffect(() => {
    if (createCampaignError) {
      console.error("Kamp√°nyl√©trehoz√°si √≠r√°si hiba:", createCampaignError)
      setError(`A kamp√°ny l√©trehoz√°sa sikertelen: ${createCampaignError.message}`)
      setIsCreatingCampaign(false)
    }
  }, [createCampaignError])

  useEffect(() => {
    if (createCampaignReceiptError) {
      console.error("Kamp√°nyl√©trehoz√°si nyugta hiba:", createCampaignReceiptError)
      setError(`A kamp√°ny tranzakci√≥ja sikertelen: ${createCampaignReceiptError.message}`)
      setIsCreatingCampaign(false)
    }
  }, [createCampaignReceiptError])

  // √öj kamp√°ny ment√©se a Neon DB-be a sikeres blokkl√°nc l√©trehoz√°s ut√°n
  const saveNewCampaignToDb = async (blockchainHash: string) => {
    if (!newCampaignData) return

    try {
      setIsSavingToDb(true)
      console.log("√öj kamp√°ny ment√©se a Neon DB-be:", newCampaignData)

      const response = await fetch("/api/promotions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          fid: newCampaignData.user.fid,
          username: newCampaignData.user.username,
          displayName: newCampaignData.user.displayName,
          castUrl: newCampaignData.castUrl,
          shareText: newCampaignData.shareText || undefined,
          rewardPerShare: newCampaignData.rewardPerShare,
          totalBudget: newCampaignData.totalBudget,
          blockchainHash: blockchainHash, // T√°rolja a blokkl√°nc tranzakci√≥ hash-√©t
        }),
      })

      if (response.ok) {
        const data = await response.json()
        console.log("Kamp√°ny sikeresen mentve a Neon DB-be:", data)

        // H√≠vja meg az onPaymentComplete-t a blokkl√°nc hash-el
        onPaymentComplete(newCampaignData.totalBudget, blockchainHash)

        // ≈∞rlap vissza√°ll√≠t√°sa
        setIsCreatingCampaign(false)
        setIsSavingToDb(false)

        // Siker√ºzenet megjelen√≠t√©se √∫jrat√∂lt√©s helyett
        console.log("üéâ Kamp√°ny sikeresen l√©trehozva √©s mentve!")
        console.log("üìã Kamp√°ny r√©szletei:", {
          blockchainHash,
          totalBudget: newCampaignData.totalBudget,
          castUrl: newCampaignData.castUrl,
        })

        // Kamp√°ny l√©trehozva jelz≈ë be√°ll√≠t√°sa
        setCampaignCreated(true)
      } else {
        const errorData = await response.json()
        console.error("Sikertelen ment√©s a Neon DB-be:", errorData)
        setError(
          `A kamp√°ny l√©trehozva a blokkl√°ncon, de nem siker√ºlt menteni az adatb√°zisba: ${errorData.error || "Ismeretlen hiba"}`,
        )
        setIsCreatingCampaign(false)
        setIsSavingToDb(false)
      }
    } catch (error) {
      console.error("Hiba a Neon DB-be ment√©skor:", error)
      setError(
        `A kamp√°ny l√©trehozva a blokkl√°ncon, de nem siker√ºlt menteni az adatb√°zisba: ${error instanceof Error ? error.message : "Ismeretlen hiba"}`,
      )
      setIsCreatingCampaign(false)
      setIsSavingToDb(false)
    }
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-900 rounded-xl p-6 w-full max-w-md mx-4">
        {/* P√©nzt√°rca √°llapota */}
        <div className="mb-4 p-3 bg-gray-800 rounded-lg text-sm">
          <p>
            <strong>P√©nzt√°rca √°llapota:</strong>
          </p>
          <p>Csatlakoztatva: {isConnected ? "Igen" : "Nem"}</p>
          <p>
            C√≠m:{" "}
            {address ? `${address.substring(0, 6)}...${address.substring(address.length - 4)}` : "Nincs csatlakoztatva"}
          </p>
          <p>
            Szerz≈ëd√©s: {CONTRACTS.FarcasterPromo.substring(0, 6)}...
            {CONTRACTS.FarcasterPromo.substring(CONTRACTS.FarcasterPromo.length - 4)}
          </p>
        </div>

        {/* Hibakeres≈ë panel */}
        <div className="mt-3 p-2 bg-red-900 bg-opacity-50 rounded border border-red-500">
          <p className="text-red-300 font-bold text-xs">üîß HIBAKERES√âSI INF√ì:</p>
          <p className="text-red-200 text-xs">
            Egyenleg:{" "}
            {balanceLoading
              ? "Bet√∂lt√©s..."
              : balanceError
                ? `Hiba: ${balanceError.message}`
                : balance
                  ? `${(Number(balance) / 1e18).toFixed(2)} CHESS`
                  : "0 CHESS"}
          </p>
          <p className="text-red-200 text-xs">
            Enged√©ly:{" "}
            {allowanceLoading
              ? "Bet√∂lt√©s..."
              : allowanceError
                ? `Hiba: ${allowanceError.message}`
                : allowance
                  ? `${(Number(allowance) / 1e18).toFixed(2)} CHESS`
                  : "0 CHESS"}
          </p>
          <p className="text-red-200 text-xs">
            J√≥v√°hagy√°s sz√ºks√©ges: {needsApproval(BigInt(10000) * BigInt(10 ** 18)) ? "Igen" : "Nem"}
          </p>
          <p className="text-red-200 text-xs">
            CHESS Token: {CONTRACTS.CHESS_TOKEN.substring(0, 6)}...
            {CONTRACTS.CHESS_TOKEN.substring(CONTRACTS.CHESS_TOKEN.length - 4)}
          </p>
          <p className="text-red-200 text-xs">J√≥v√°hagy√°s folyamatban: {isApproving ? "Igen" : "Nem"}</p>
          <p className="text-red-200 text-xs">J√≥v√°hagy√°s sikeres: {isApproveSuccess ? "Igen" : "Nem"}</p>
          {approveError && <p className="text-red-400 text-xs">J√≥v√°hagy√°si hiba: {approveError.message}</p>}
          {createSimulationError && (
            <p className="text-red-400 text-xs">Szimul√°ci√≥s hiba: {createSimulationError.message}</p>
          )}{" "}
          {createCampaignError && <p className="text-red-400 text-xs">√çr√°si hiba: {createCampaignError.message}</p>}{" "}
          {createCampaignReceiptError && (
            <p className="text-red-400 text-xs">Nyugta hiba: {createCampaignReceiptError.message}</p>
          )}{" "}
          <button
            onClick={async () => {
              console.log("üöÄ K√âNYSZER√çTETT J√ìV√ÅHAGY√ÅS TESZT")
              try {
                // Clear any previous errors
                setError("")
                
                // Check wallet connection
                if (!address || !isConnected) {
                  setError("P√©nzt√°rca nincs csatlakoztatva")
                  return
                }
                
                console.log("Debug approval attempt:", {
                  address,
                  isConnected,
                  amount: (BigInt(10000) * BigInt(10 ** 18)).toString()
                })
                
                // Add delay to ensure connector is ready
                await new Promise(resolve => setTimeout(resolve, 300))
                
                approveFarcasterPromo(BigInt(10000) * BigInt(10 ** 18))
              } catch (error) {
                console.error("Debug approval error:", error)
                if (error instanceof Error) {
                  if (error.message.includes('getChainId') || error.message.includes('connector')) {
                    setError("Connector hiba - pr√≥b√°lja √∫jra csatlakoztatni a p√©nzt√°rc√°t")
                  } else {
                    setError(`Debug j√≥v√°hagy√°si hiba: ${error.message}`)
                  }
                }
              }
            }}
            disabled={isApproving || !address || !isConnected}
            className="mt-2 px-2 py-1 bg-green-700 hover:bg-green-600 disabled:bg-gray-600 text-white text-xs rounded"
          >
            {isApproving ? "J√≥v√°hagy√°s..." : "üöÄ K√©nyszer√≠tett j√≥v√°hagy√°s 10K CHESS"}
          </button>
        </div>

        {/* Kamp√°ny l√©trehoz√°si ≈±rlap */}
        {promotionId === "new" && newCampaignData && (
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-white mb-4">√öj kamp√°ny l√©trehoz√°sa</h3>

            {/* Kamp√°ny √∂sszefoglal√≥ */}
            <div className="bg-gray-800 rounded-lg p-4 mb-4">
              <h4 className="text-sm font-medium text-gray-300 mb-2">Kamp√°ny √∂sszefoglal√≥</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">Cast URL:</span>
                  <span className="text-white truncate max-w-[200px]">{newCampaignData.castUrl}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Megoszt√°si sz√∂veg:</span>
                  <span className="text-white">"{newCampaignData.shareText || "Ossza meg ezt a prom√≥ci√≥t!"}"</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Jutalom megoszt√°sonk√©nt:</span>
                  <span className="text-green-400">{formatNumber(newCampaignData.rewardPerShare)} $CHESS</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Teljes k√∂lts√©gvet√©s:</span>
                  <span className="text-blue-400">{formatNumber(newCampaignData.totalBudget)} $CHESS</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Oszthat√≥:</span>
                  <span className="text-green-400">Igen ‚úì</span>
                </div>
              </div>
            </div>

            {/* Kamp√°ny l√©trehoz√°sa gomb */}
            <button
              onClick={handleCreateCampaign}
              disabled={isCreatingCampaign || isCreatingCampaignFromHook || isSavingToDb || (!createSimulationData && createSimulationError && !createSimulationError.message?.includes('getChainId'))}
              className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 disabled:cursor-not-allowed text-white font-semibold py-3 px-4 rounded-lg transition-colors"
            >
              {isCreatingCampaign || isCreatingCampaignFromHook
                ? "Kamp√°ny l√©trehoz√°sa..."
                : isSavingToDb
                  ? "Ment√©s az adatb√°zisba..."
                  : "√öj kamp√°ny l√©trehoz√°sa"}
            </button>

            {/* Megjegyz√©s a CHESS finansz√≠roz√°sr√≥l */}
            <div className="mt-4 p-3 bg-blue-900 bg-opacity-20 rounded-lg">
              <p className="text-xs text-blue-400">
                <strong>Megjegyz√©s:</strong> A kamp√°ny l√©trehoz√°sa ingyenes. A CHESS token finansz√≠roz√°s a kamp√°ny
                l√©trehoz√°sa ut√°n lesz el√©rhet≈ë.
              </p>
            </div>
          </div>
        )}

        {/* Siker√ºzenetek */}
        {isApproveSuccess && (
          <div className="flex items-center gap-2 text-green-400 mb-4 p-3 bg-green-900 bg-opacity-20 rounded-lg">
            <span className="text-lg">‚úÖ</span>
            <span className="text-sm">CHESS token sikeresen j√≥v√°hagyva!</span>
          </div>
        )}

        {campaignCreated && (
          <div className="flex items-center gap-2 text-green-400 mb-4 p-3 bg-green-900 bg-opacity-20 rounded-lg">
            <span className="text-lg">üéâ</span>
            <span className="text-sm">Kamp√°ny sikeresen l√©trehozva a blokkl√°ncon √©s mentve az adatb√°zisba!</span>
          </div>
        )}

        {/* Hiba√ºzenet */}
        {error && (
          <div className="flex items-center gap-2 text-red-400 mb-4 p-3 bg-red-900 bg-opacity-20 rounded-lg">
            <FiAlertCircle />
            <span className="text-sm">{error}</span>
          </div>
        )}

        {/* M≈±veleti gombok */}
        <div className="flex gap-3">
          <button
            onClick={onCancel}
            className="flex-1 bg-gray-600 hover:bg-gray-700 text-white font-semibold py-3 px-4 rounded-lg transition-colors"
          >
            M√©gse
          </button>

          {/* J√≥v√°hagy√°s gomb a finansz√≠roz√°shoz */}
          {needsApproval(BigInt(10000) * BigInt(10 ** 18)) && (
            <button
              onClick={async () => {
                console.log("üéØ J√≥v√°hagy√°s gomb megnyomva")
                console.log("üìã J√≥v√°hagy√°si param√©terek:", {
                  spender: CONTRACTS.FarcasterPromo,
                  amount: (BigInt(10000) * BigInt(10 ** 18)).toString(),
                })

                try {
                  // Clear any previous errors
                  setError("")
                  
                  // Check wallet connection
                  if (!address || !isConnected) {
                    setError("K√©rj√ºk, el≈ësz√∂r csatlakoztassa a p√©nzt√°rc√°j√°t.")
                    return
                  }

                  // Add delay to ensure connector is ready
                  await new Promise(resolve => setTimeout(resolve, 200))

                  // Use the correct function signature
                  approveFarcasterPromo(BigInt(10000) * BigInt(10 ** 18))
                } catch (error) {
                  console.error("‚ùå Approval button error:", error)
                  if (error instanceof Error) {
                    if (error.message.includes('getChainId') || error.message.includes('connector')) {
                      setError("P√©nzt√°rca kapcsolati hiba. K√©rj√ºk, csatlakoztassa √∫jra a p√©nzt√°rc√°j√°t.")
                    } else {
                      setError(`J√≥v√°hagy√°si hiba: ${error.message}`)
                    }
                  }
                }
              }}
              disabled={isApproving || !address || !isConnected}
              className="flex-1 bg-green-600 hover:bg-green-700 disabled:bg-green-800 disabled:cursor-not-allowed text-white font-semibold py-3 px-4 rounded-lg transition-colors"
            >
              {isApproving ? "J√≥v√°hagy√°s..." : !address ? "P√©nzt√°rca csatlakoztat√°sa sz√ºks√©ges" : "CHESS j√≥v√°hagy√°sa"}
            </button>
          )}
        </div>

        {/* Biztons√°gi figyelmeztet√©s */}
        <div className="mt-4 p-3 bg-yellow-900 bg-opacity-20 rounded-lg">
          <p className="text-xs text-yellow-400">
            <strong>Biztons√°gi figyelmeztet√©s:</strong> Ez a tranzakci√≥ kamp√°nyt hoz l√©tre a blokkl√°ncon. Gy≈ëz≈ëdj√∂n meg
            arr√≥l, hogy minden r√©szlet helyes, miel≈ëtt folytatja.
          </p>
        </div>
      </div>
    </div>
  )
}