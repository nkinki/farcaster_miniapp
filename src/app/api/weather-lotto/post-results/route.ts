import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { round, winningSide, winners, totalPayout, treasuryAmount } = await request.json();

    // Figyelemfelkelt≈ë post vari√°ci√≥k
    const postVariations = [
      // Vari√°ci√≥ 1: Emoji heavy
      `üé∞ WEATHER LOTTO RESULTS üé∞\n\nRound #${round.round_number} COMPLETED!\n\nüèÜ WINNING SIDE: ${winningSide.toUpperCase()}\nüí∞ Total Payout: ${(totalPayout / 1e18).toFixed(2)} CHESS\nüèõÔ∏è Treasury: ${(treasuryAmount / 1e18).toFixed(2)} CHESS\nüë• Winners: ${winners.length} players\n\nüéâ Congratulations to all winners! üéâ\n\n#WeatherLotto #CHESS #Farcaster`,

      // Vari√°ci√≥ 2: Drama style
      `‚ö° BREAKING: Weather Lotto Draw Complete! ‚ö°\n\nüå§Ô∏è Round #${round.round_number} has been decided!\n\nüèÜ The winning side is: ${winningSide.toUpperCase()}\n\nüí∞ ${(totalPayout / 1e18).toFixed(2)} CHESS distributed to ${winners.length} lucky winners!\nüèõÔ∏è ${(treasuryAmount / 1e18).toFixed(2)} CHESS added to treasury\n\nüéä Another successful draw in the books! üéä\n\n#WeatherLotto #CHESS #Winners`,

      // Vari√°ci√≥ 3: News style
      `üì∞ WEATHER LOTTO DAILY REPORT üì∞\n\nRound #${round.round_number} Results:\n\nüéØ Winning Side: ${winningSide.toUpperCase()}\nüí∏ Prize Pool: ${(totalPayout / 1e18).toFixed(2)} CHESS\nüëë Winners: ${winners.length} players\nüè¶ Treasury: ${(treasuryAmount / 1e18).toFixed(2)} CHESS\n\nüå§Ô∏è Will tomorrow be sunny or rainy? Place your bets! üå§Ô∏è\n\n#WeatherLotto #DailyDraw #CHESS`,

      // Vari√°ci√≥ 4: Celebration style
      `üéâ WEATHER LOTTO CELEBRATION! üéâ\n\nRound #${round.round_number} is COMPLETE!\n\nüèÜ ${winningSide.toUpperCase()} takes the win!\n\nüí∞ ${(totalPayout / 1e18).toFixed(2)} CHESS in prizes!\nüë• ${winners.length} happy winners!\nüèõÔ∏è ${(treasuryAmount / 1e18).toFixed(2)} CHESS to treasury\n\nüéä Thank you for playing! üéä\n\n#WeatherLotto #Winners #CHESS #Celebration`,

      // Vari√°ci√≥ 5: Stats focused
      `üìä WEATHER LOTTO STATS UPDATE üìä\n\nRound #${round.round_number} Final Results:\n\nüé≤ Winning Side: ${winningSide.toUpperCase()}\nüíé Prize Distribution: ${(totalPayout / 1e18).toFixed(2)} CHESS\nüëë Winner Count: ${winners.length}\nüèõÔ∏è Treasury Addition: ${(treasuryAmount / 1e18).toFixed(2)} CHESS\n\nüìà Total Rounds: ${round.round_number}\n\n#WeatherLotto #Stats #CHESS #Data`,

      // Vari√°ci√≥ 6: Community focused
      `üåç WEATHER LOTTO COMMUNITY UPDATE üåç\n\nRound #${round.round_number} Results:\n\nüèÜ ${winningSide.toUpperCase()} wins the day!\n\nüí∞ ${(totalPayout / 1e18).toFixed(2)} CHESS shared with ${winners.length} community members!\nüèõÔ∏è ${(treasuryAmount / 1e18).toFixed(2)} CHESS supports the treasury\n\nü§ù Thank you for being part of our community! ü§ù\n\n#WeatherLotto #Community #CHESS #Together`,

      // Vari√°ci√≥ 7: Action oriented
      `‚ö° WEATHER LOTTO ACTION COMPLETE! ‚ö°\n\nRound #${round.round_number} Draw Results:\n\nüéØ Winning Side: ${winningSide.toUpperCase()}\n\nüí∏ Prize Pool: ${(totalPayout / 1e18).toFixed(2)} CHESS\nüëë Winners: ${winners.length} players\nüè¶ Treasury: ${(treasuryAmount / 1e18).toFixed(2)} CHESS\n\nüöÄ Ready for the next round? üöÄ\n\n#WeatherLotto #Action #CHESS #NextRound`,

      // Vari√°ci√≥ 8: Mystery style
      `üîÆ WEATHER LOTTO MYSTERY SOLVED! üîÆ\n\nRound #${round.round_number} Revealed:\n\nüèÜ The winning side is... ${winningSide.toUpperCase()}!\n\nüí∞ ${(totalPayout / 1e18).toFixed(2)} CHESS distributed!\nüë• ${winners.length} players rewarded!\nüèõÔ∏è ${(treasuryAmount / 1e18).toFixed(2)} CHESS to treasury\n\nüé≠ What will tomorrow bring? üé≠\n\n#WeatherLotto #Mystery #CHESS #Revealed`,

      // Vari√°ci√≥ 9: Achievement style
      `üèÖ WEATHER LOTTO ACHIEVEMENT UNLOCKED! üèÖ\n\nRound #${round.round_number} Complete!\n\nüéØ Winning Side: ${winningSide.toUpperCase()}\n\nüíé Prize Distribution: ${(totalPayout / 1e18).toFixed(2)} CHESS\nüëë Winner Count: ${winners.length}\nüèõÔ∏è Treasury: ${(treasuryAmount / 1e18).toFixed(2)} CHESS\n\nüéñÔ∏è Another successful draw achieved! üéñÔ∏è\n\n#WeatherLotto #Achievement #CHESS #Success`,

      // Vari√°ci√≥ 10: Future focused
      `üöÄ WEATHER LOTTO FUTURE UPDATE! üöÄ\n\nRound #${round.round_number} Results:\n\nüèÜ ${winningSide.toUpperCase()} wins!\n\nüí∞ ${(totalPayout / 1e18).toFixed(2)} CHESS distributed to ${winners.length} winners!\nüèõÔ∏è ${(treasuryAmount / 1e18).toFixed(2)} CHESS to treasury\n\nüåü The future of weather prediction is here! üåü\n\n#WeatherLotto #Future #CHESS #Innovation`
    ];

    // Random vari√°ci√≥ kiv√°laszt√°sa
    const randomIndex = Math.floor(Math.random() * postVariations.length);
    const selectedPost = postVariations[randomIndex];

    // Email √©rtes√≠t√©s k√ºld√©se
    const emailContent = `
üå§Ô∏è WEATHER LOTTO DRAW COMPLETED! üå§Ô∏è

Round #${round.round_number} Results:
- Winning Side: ${winningSide.toUpperCase()}
- Total Payout: ${(totalPayout / 1e18).toFixed(2)} CHESS
- Winners: ${winners.length} players
- Treasury: ${(treasuryAmount / 1e18).toFixed(2)} CHESS

Selected Farcaster Post (Variation ${randomIndex + 1}):
${selectedPost}

All Post Variations:
${postVariations.map((post, index) => `${index + 1}. ${post.split('\n')[0]}`).join('\n')}

Timestamp: ${new Date().toISOString()}
    `;

    // Email k√ºld√©se
    try {
      const emailResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'https://farc-nu.vercel.app'}/api/weather-lotto/send-email`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          emailContent,
          selectedPost,
          allVariations: postVariations,
          roundData: round
        })
      });

      if (emailResponse.ok) {
        console.log('‚úÖ Email sent successfully');
      } else {
        console.log('‚ö†Ô∏è Email sending failed');
      }
    } catch (emailError) {
      console.log('‚ö†Ô∏è Email sending error (non-critical):', emailError);
    }

    console.log('üìß Email content:', emailContent);
    console.log('üì± Selected Farcaster post:', selectedPost);

    return NextResponse.json({
      success: true,
      selectedPost,
      allVariations: postVariations,
      emailContent,
      message: 'Post variations generated and email sent successfully'
    });

  } catch (error) {
    console.error('Error generating post variations:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to generate post variations' },
      { status: 500 }
    );
  }
}
