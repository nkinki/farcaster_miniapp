#!/usr/bin/env python3
"""
Teszt script az automatikus friss√≠t√©si folyamathoz
"""

import os
import json
import subprocess
import sys
from datetime import datetime

def test_data_download():
    """Teszteli az adatok let√∂lt√©s√©t"""
    print("üîÑ Tesztel√©s: Adatok let√∂lt√©se...")
    
    try:
        result = subprocess.run([sys.executable, "update_ranking.py"], 
                              capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ Adatok let√∂lt√©se sikeres")
            
            # Ellen≈ërizz√ºk a f√°jlt
            if os.path.exists("top_miniapps.json"):
                with open("top_miniapps.json", "r", encoding="utf-8") as f:
                    data = json.load(f)
                print(f"   - Miniappok sz√°ma: {len(data)}")
                return True
            else:
                print("‚ùå top_miniapps.json f√°jl nem tal√°lhat√≥")
                return False
        else:
            print(f"‚ùå Adatok let√∂lt√©se sikertelen: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Id≈ët√∫ll√©p√©s az adatok let√∂lt√©sekor")
        return False
    except Exception as e:
        print(f"‚ùå Hiba: {e}")
        return False

def test_database_update():
    """Teszteli az adatb√°zis friss√≠t√©s√©t"""
    print("üîÑ Tesztel√©s: Adatb√°zis friss√≠t√©se...")
    
    try:
        result = subprocess.run([sys.executable, "daily_update.py"], 
                              capture_output=True, text=True, timeout=120)
        
        if result.returncode == 0:
            print("‚úÖ Adatb√°zis friss√≠t√©se sikeres")
            return True
        else:
            print(f"‚ùå Adatb√°zis friss√≠t√©se sikertelen: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Id≈ët√∫ll√©p√©s az adatb√°zis friss√≠t√©sekor")
        return False
    except Exception as e:
        print(f"‚ùå Hiba: {e}")
        return False

def test_data_copy():
    """Teszteli az adatok m√°sol√°s√°t"""
    print("üîÑ Tesztel√©s: Adatok m√°sol√°sa...")
    
    try:
        # M√°soljuk a f√°jlt
        import shutil
        shutil.copy("top_miniapps.json", "public/data/")
        
        if os.path.exists("public/data/top_miniapps.json"):
            print("‚úÖ Adatok m√°sol√°sa sikeres")
            return True
        else:
            print("‚ùå Adatok m√°sol√°sa sikertelen")
            return False
            
    except Exception as e:
        print(f"‚ùå Hiba: {e}")
        return False

def test_api_response():
    """Teszteli az API v√°lasz√°t"""
    print("üîÑ Tesztel√©s: API v√°lasz...")
    
    try:
        import requests
        
        # Lok√°lis API teszt
        response = requests.get("http://localhost:3000/api/miniapps?limit=5", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API v√°lasz sikeres - {len(data.get('miniapps', []))} miniapp")
            return True
        else:
            print(f"‚ùå API v√°lasz sikertelen: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è  Lok√°lis szerver nem fut - API teszt kihagyva")
        return True
    except Exception as e:
        print(f"‚ùå Hiba: {e}")
        return False

def main():
    """F≈ë teszt f√ºggv√©ny"""
    print("=== AUTOMATIZ√ÅCI√ìS TESZT ===")
    print(f"D√°tum: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    tests = [
        ("Adatok let√∂lt√©se", test_data_download),
        ("Adatb√°zis friss√≠t√©se", test_database_update),
        ("Adatok m√°sol√°sa", test_data_copy),
        ("API v√°lasz", test_api_response)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n--- {test_name} ---")
        result = test_func()
        results.append((test_name, result))
    
    # √ñsszefoglal√≥
    print(f"\n=== TESZT EREDM√âNYEK ===")
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    print(f"\n√ñsszesen: {passed}/{total} teszt sikeres")
    
    if passed == total:
        print("üéâ Minden teszt sikeres! Az automatikus friss√≠t√©s k√©szen √°ll.")
    else:
        print("‚ö†Ô∏è  N√©h√°ny teszt sikertelen. Ellen≈ërizd a konfigur√°ci√≥t.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 